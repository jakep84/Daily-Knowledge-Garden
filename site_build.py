from pathlib import Path
import shutil
import datetime as dt
import markdown

ROOT = Path(__file__).parent.resolve()
DATA = ROOT / "data"
DOCS = ROOT / "docs"

STYLE = """
<style>
  :root { color-scheme: light dark; }
  body { font-family: system-ui, -apple-system, Segoe UI, Roboto, Ubuntu, Cantarell, Noto Sans, Helvetica, Arial, "Apple Color Emoji", "Segoe UI Emoji"; margin: 24px auto; max-width: 900px; padding: 0 16px; line-height: 1.6; }
  h1,h2,h3 { line-height: 1.25; }
  nav { margin: 16px 0 24px; }
  .muted { opacity: .7; }
  .grid { display: grid; grid-template-columns: repeat(auto-fill, minmax(220px, 1fr)); gap: 8px 14px; }
  a { text-decoration: none; }
  a:hover { text-decoration: underline; }
  .card { border: 1px solid #4444; border-radius: 12px; padding: 12px 14px; }
  footer { margin: 48px 0 16px; font-size: 0.9em; }
</style>
"""

HTML_SHELL = """<!doctype html>
<html lang="en">
<meta charset="utf-8">
<meta name="viewport" content="width=device-width,initial-scale=1">
<title>{title}</title>
{style}
<body>
<nav><a href="../index.html">‚Üê All days</a></nav>
{content}
<footer class="muted">Updated {updated_utc} ‚Ä¢ <a href="https://github.com/{repo}">GitHub repo</a></footer>
</body>
</html>
"""

INDEX_SHELL = """<!doctype html>
<html lang="en">
<meta charset="utf-8">
<meta name="viewport" content="width=device-width,initial-scale=1">
<title>Daily Knowledge Garden ‚Äî Archive</title>
{style}
<body>
<h1>üå± Daily Knowledge Garden ‚Äî Archive</h1>
<p class="muted">Autonomous daily reports generated by GitHub Actions.</p>
{latest_block}
<h2>All Days</h2>
<div class="grid">
{links}
</div>
<footer class="muted">Updated {updated_utc} ‚Ä¢ <a href="https://github.com/{repo}">GitHub repo</a></footer>
</body>
</html>
"""

def repo_slug() -> str:
    # Best effort guess from git config; safe fallback for Pages links
    gh = (ROOT / ".git" / "config")
    try:
        txt = gh.read_text(errors="ignore")
        for line in txt.splitlines():
            if "github.com" in line and ".git" in line:
                # ...github.com:USER/REPO.git or https://github.com/USER/REPO.git
                tail = line.strip().split("github.com")[-1].replace(":", "/")
                parts = tail.strip("/").removesuffix(".git")
                return parts
    except Exception:
        pass
    return "YOUR_USER/YOUR_REPO"

def convert_md_to_html(md_text: str) -> str:
    return markdown.markdown(md_text, extensions=["extra", "tables", "sane_lists"])

def build_day(day_dir: Path, repo: str):
    """Create docs/YYYY-MM-DD/index.html and copy assets so relative links work."""
    day = day_dir.name
    out_dir = DOCS / day
    out_dir.mkdir(parents=True, exist_ok=True)

    # Copy plots/ and images/ if present
    for sub in ["plots", "images"]:
        src = day_dir / sub
        dst = out_dir / sub
        if src.exists():
            if dst.exists():
                shutil.rmtree(dst)
            shutil.copytree(src, dst)

    # Convert report.md ‚Üí index.html
    report_md = (day_dir / "report.md").read_text(encoding="utf-8")
    report_html = convert_md_to_html(report_md)
    updated = dt.datetime.utcnow().strftime("%Y-%m-%d %H:%M UTC")
    html = HTML_SHELL.format(
        title=f"Daily Knowledge Garden ‚Äî {day}",
        style=STYLE,
        content=report_html,
        updated_utc=updated,
        repo=repo
    )
    (out_dir / "index.html").write_text(html, encoding="utf-8")

def build_index(days: list[Path], repo: str):
    # Build the archive index (list of all days)
    links = []
    for d in days:
        day = d.name
        links.append(f'<a class="card" href="./{day}/"><strong>{day}</strong><br><span class="muted">Daily report</span></a>')
    links_html = "\n".join(links)

    latest_block = ""
    redirect_snippet = ""
    if days:
        latest = days[-1].name
        latest_block = f'<p><strong>Latest:</strong> <a href="./{latest}/">{latest}</a></p>'
        # Add auto-redirect JS to latest report
        redirect_snippet = f'<script>location.replace("./{latest}/");</script>'

    updated = dt.datetime.utcnow().strftime("%Y-%m-%d %H:%M UTC")
    html = INDEX_SHELL.format(
        style=STYLE, links=links_html, updated_utc=updated, repo=repo, latest_block=latest_block
    )
    # Inject redirect script just before </body>
    html = html.replace("</body>", f"{redirect_snippet}\n</body>")
    (DOCS / "index.html").write_text(html, encoding="utf-8")

def main():
    DOCS.mkdir(exist_ok=True)
    if not DATA.exists():
        print("No data yet; skipping site build.")
        return
    days = sorted([p for p in DATA.iterdir() if p.is_dir()])
    repo = repo_slug()

    for d in days:
        build_day(d, repo)

    build_index(days, repo)
    print("Site built into /docs")

if __name__ == "__main__":
    main()
